type User {
	id: ID!
	name: String!
	email: String!
	phone: String!
	dob: String!
	company: String!
}

type Company {
  id: ID!
	name: String!
	website: String!
	address: String!
	employeesCount: Int!
}

type CovidCountryInfo {
  _id: Float
  iso2: String
  iso3: String
  lat: Float
  long: Float
  flag: String
}

type CountriesCovidData {
  updated: String
  country: String
  cases: Float
  todayCases: Float
  deaths: Float
  todayDeaths: Float
  recovered: Float
  todayRecovered: Float
  active: Float
  critical: Float
  casesPerOneMillion: Float
  deathsPerOneMillion: Float
  tests: Float
  testsPerOneMillion: Float
  population: Float
  continent: String
  oneCasePerPeople: Float
  oneDeathPerPeople: Float
  oneTestPerPeople: Float
  activePerOneMillion: Float
  recoveredPerOneMillion: Float
  criticalPerOneMillion: Float
  countryInfo: CovidCountryInfo
}

type Query {
  test: String!
  allUsers: [User!]!
  allCompanies: [Company!]!

  getCovidDataOfCountry(country: String!): CountriesCovidData
}

input UserInput {
	name: String!
	email: String!
	phone: String!
	dob: String!
	company: String!
}

input CompanyInput {
  name: String!
	website: String!
	address: String!
	employeesCount: Int!
}

type Mutation {
  addUser( user: UserInput): User!
  deleteUser( id: ID!): User

  addCompany( company: CompanyInput): Company!
  deleteCompany( id: ID!): Company
}
